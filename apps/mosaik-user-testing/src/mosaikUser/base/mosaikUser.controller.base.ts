/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MosaikUserService } from "../mosaikUser.service";
import { Public } from "../../decorators/public.decorator";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MosaikUserCreateInput } from "./MosaikUserCreateInput";
import { MosaikUser } from "./MosaikUser";
import { MosaikUserFindManyArgs } from "./MosaikUserFindManyArgs";
import { MosaikUserWhereUniqueInput } from "./MosaikUserWhereUniqueInput";
import { MosaikUserUpdateInput } from "./MosaikUserUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MosaikUserControllerBase {
  constructor(
    protected readonly service: MosaikUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @Public()
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MosaikUser })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMosaikUser(
    @common.Body() data: MosaikUserCreateInput
  ): Promise<MosaikUser> {
    return await this.service.createMosaikUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isEmailVerified: true,
        isPhoneVerified: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MosaikUser] })
  @ApiNestedQuery(MosaikUserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MosaikUser",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mosaikUsers(@common.Req() request: Request): Promise<MosaikUser[]> {
    const args = plainToClass(MosaikUserFindManyArgs, request.query);
    return this.service.mosaikUsers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isEmailVerified: true,
        isPhoneVerified: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MosaikUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MosaikUser",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mosaikUser(
    @common.Param() params: MosaikUserWhereUniqueInput
  ): Promise<MosaikUser | null> {
    const result = await this.service.mosaikUser({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isEmailVerified: true,
        isPhoneVerified: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MosaikUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MosaikUser",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMosaikUser(
    @common.Param() params: MosaikUserWhereUniqueInput,
    @common.Body() data: MosaikUserUpdateInput
  ): Promise<MosaikUser | null> {
    try {
      return await this.service.updateMosaikUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          isEmailVerified: true,
          isPhoneVerified: true,
          lastName: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MosaikUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MosaikUser",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMosaikUser(
    @common.Param() params: MosaikUserWhereUniqueInput
  ): Promise<MosaikUser | null> {
    try {
      return await this.service.deleteMosaikUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          isEmailVerified: true,
          isPhoneVerified: true,
          lastName: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generate-email-otp")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateEmailOtp(
    @common.Body()
    body: MosaikUserCreateInput
  ): Promise<string> {
    return this.service.GenerateEmailOtp(body);
  }

  @common.Post("/generate-phone-otp")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GeneratePhoneOtp(
    @common.Body()
    body: MosaikUserCreateInput
  ): Promise<string> {
    return this.service.GeneratePhoneOtp(body);
  }

  @common.Post("/login")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async LoginMosaikUser(
    @common.Body()
    body: MosaikUserCreateInput
  ): Promise<string> {
    return this.service.LoginMosaikUser(body);
  }

  @common.Post("/verify-email-otp")
  @swagger.ApiOkResponse({
    type: Boolean,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async VerifyEmailOtp(
    @common.Body()
    body: MosaikUserCreateInput
  ): Promise<boolean> {
    return this.service.VerifyEmailOtp(body);
  }

  @common.Post("/verify-phone-otp")
  @swagger.ApiOkResponse({
    type: Boolean,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async VerifyPhoneOtp(
    @common.Body()
    body: MosaikUserCreateInput
  ): Promise<boolean> {
    return this.service.VerifyPhoneOtp(body);
  }
}
