/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MosaikUser as PrismaMosaikUser } from "@prisma/client";
import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";
import { MosaikUserCreateInput } from "./MosaikUserCreateInput";
import { LoginMosaikUserInput } from "../LoginMosaikUserInput";

export class MosaikUserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count(
    args: Omit<Prisma.MosaikUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mosaikUser.count(args);
  }

  async mosaikUsers(
    args: Prisma.MosaikUserFindManyArgs
  ): Promise<PrismaMosaikUser[]> {
    return this.prisma.mosaikUser.findMany(args);
  }
  async mosaikUser(
    args: Prisma.MosaikUserFindUniqueArgs
  ): Promise<PrismaMosaikUser | null> {
    return this.prisma.mosaikUser.findUnique(args);
  }
  async createMosaikUser(
    args: Prisma.MosaikUserCreateArgs
  ): Promise<PrismaMosaikUser> {
    return this.prisma.mosaikUser.create({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async updateMosaikUser(
    args: Prisma.MosaikUserUpdateArgs
  ): Promise<PrismaMosaikUser> {
    return this.prisma.mosaikUser.update({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async deleteMosaikUser(
    args: Prisma.MosaikUserDeleteArgs
  ): Promise<PrismaMosaikUser> {
    return this.prisma.mosaikUser.delete(args);
  }
  async GenerateEmailOtp(args: MosaikUserCreateInput): Promise<string> {
    throw new Error("Not implemented");
  }
  async GeneratePhoneOtp(args: MosaikUserCreateInput): Promise<string> {
    throw new Error("Not implemented");
  }
  async LoginMosaikUser(args: LoginMosaikUserInput): Promise<string> {
    throw new Error("Not implemented");
  }
  async VerifyEmailOtp(args: MosaikUserCreateInput): Promise<boolean> {
    throw new Error("Not implemented");
  }
  async VerifyPhoneOtp(args: MosaikUserCreateInput): Promise<boolean> {
    throw new Error("Not implemented");
  }
}
